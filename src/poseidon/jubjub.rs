/*
This module implements the extended twisted edwards and extended affine coordinates
described in the paper "Twisted Edwards Curves Revisited":

 - https://iacr.org/archive/asiacrypt2008/53500329/53500329.pdf
   Huseyin Hisil, Kenneth Koon-Ho Wong, Gary Carter, and Ed Dawson

        Information Security Institute,
        Queensland University of Technology, QLD, 4000, Australia
        {h.hisil, kk.wong, g.carter, e.dawson}@qut.edu.au

By using the extended coordinate system we can avoid expensive modular exponentiation
calls, for example - a scalar multiplication call (or multiple...) may perform only
one 3d->2d projection at the point where affine coordinates are necessary, and every
intermediate uses a much faster form.

# XXX: none of these functions are constant time, they should not be used interactively!
*/
// ax^2 + y^2 = 1 + dx^2y^2

use crate::poseidon::field::SNARK_SCALAR_FIELD;
use num_bigint::BigInt;
use std::{ops::Div, str::FromStr};

use super::field::FQ;

lazy_static! {
    pub static ref JUBJUB_Q: BigInt = SNARK_SCALAR_FIELD.clone();
    pub static ref JUBJUB_E: BigInt = BigInt::from_str(
        "21888242871839275222246405745257275088614511777268538073601725287587578984328"
    )
    .unwrap();
    pub static ref JUBJUB_C: BigInt = BigInt::from_str("8").unwrap();

    //L is the order of the prime-order subgroup generated by the base point
    pub static ref JUBJUB_L: BigInt = JUBJUB_E.clone().div(JUBJUB_C.clone()); // L*B = 0, and (2^C)*L == #E
    pub static ref JUBJUB_A: BigInt = BigInt::from_str("168700").unwrap();
    pub static ref JUBJUB_D: BigInt = BigInt::from_str("168696").unwrap();
}

// pub struct Point {
//     x: FQ,
//     y: FQ,
// }

// impl Point {}
